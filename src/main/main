#!/usr/bin/env python3
import argparse
from contextlib import contextmanager
import sys
import time
import os
import shutil

class RuntimeManager:
    def __enter__(self):
        print("Starting compilation process...")
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        print("Compilation completed!")

def create_binary(source_path, output_dir):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    output_name = os.path.splitext(os.path.basename(source_path))[0]
    if sys.platform == "win32":
        output_name += ".exe"
    
    output_path = os.path.join(output_dir, output_name)
    
    # Create a simple executable wrapper
    with open(output_path, 'wb') as f:
        f.write(b'#!/usr/bin/env python3\n')
        with open(source_path, 'rb') as src:
            f.write(src.read())
    
    # Make the file executable on Unix-like systems
    if sys.platform != "win32":
        os.chmod(output_path, 0o755)
    
    print(f"Binary created at: {output_path}")
    return output_path

def main():
    parser = argparse.ArgumentParser(description='Compyler - Advanced Python to Executable Compiler')
    parser.add_argument('source', help='Source file to compile')
    parser.add_argument('-o', '--output', default='dist', help='Output directory')
    parser.add_argument('--embed-runtime', action='store_true', help='Embed runtime components')
    
    args = parser.parse_args()
    
    with RuntimeManager() as rm:
        binary_path = create_binary(args.source, args.output)
        print(f"Successfully created binary at: {binary_path}")

if __name__ == "__main__":
    main()